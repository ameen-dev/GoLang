Json:-

{
  "species": "pigeon",
  "decription": "likes to perch on rocks"
}

type Bird struct {
  Species string
  Description string
}

birdJson := `{"species": "pigeon","description": "likes to perch on rocks"}`
var bird Bird	
json.Unmarshal([]byte(birdJson), &bird)
fmt.Printf("Species: %s, Description: %s", bird.Species, bird.Description)

----------------------------------------------------------------------------------------------------------------------------

Json array/List of json objects:-

[
  {
    "species": "pigeon",
    "decription": "likes to perch on rocks"
  },
  {
    "species":"eagle",
    "description":"bird of prey"
  }
]

birdJson := `[{"species":"pigeon","decription":"likes to perch on rocks"},{"species":"eagle","description":"bird of prey"}]`
var birds []Bird
json.Unmarshal([]byte(birdJson), &birds)
fmt.Printf("Birds : %+v", birds)

----------------------------------------------------------------------------------------------------------------------------

Embedded objects:-

{
  "species": "pigeon",
  "decription": "likes to perch on rocks"
  "dimensions": {
    "height": 24,
    "width": 10
  }
}

type Dimensions struct {
  Height int
  Width int
}

type Bird struct {
  Species string
  Description string
  Dimensions Dimensions
}

birdJson := `{"species":"pigeon","description":"likes to perch on rocks", "dimensions":{"height":24,"width":10}}`
var birds Bird
json.Unmarshal([]byte(birdJson), &birds)
fmt.Printf(bird)

----------------------------------------------------------------------------------------------------------------------------

Primitives:-

numberJson := "3"
floatJson := "3.1412"
stringJson := `"bird"`

var n int
var pi float64
var str string

json.Unmarshal([]byte(numberJson), &n)
fmt.Println(n)
// 3

json.Unmarshal([]byte(floatJson), &pi)
fmt.Println(pi)
// 3.1412

json.Unmarshal([]byte(stringJson), &str)
fmt.Println(str)

----------------------------------------------------------------------------------------------------------------------------

Custom attribute names:-

{
  "birdType": "pigeon",
  "what it does": "likes to perch on rocks"
}

=>

type Bird struct {
  Species string `json:"birdType"`
  Description string `json:"what it does"`
}

birdJson := `{"birdType": "pigeon","what it does": "likes to perch on rocks"}`
var bird Bird
json.Unmarshal([]byte(birdJson), &bird)
fmt.Println(bird)

----------------------------------------------------------------------------------------------------------------------------

Unstructured data (Decoding JSON to maps):-

{
  "birds": {
    "pigeon":"likes to perch on rocks",
    "eagle":"bird of prey"
  },
  "animals": "none"
}

birdJson := `{"birds":{"pigeon":"likes to perch on rocks","eagle":"bird of prey"},"animals":"none"}`
var result map[string]interface{}
json.Unmarshal([]byte(birdJson), &result)

// The object stored in the "birds" key is also stored as 
// a map[string]interface{} type, and its type is asserted from
// the interface{} type
birds := result["birds"].(map[string]interface{})

for key, value := range birds {
  // Each value is an interface{} type, that is type asserted as a string
  fmt.Println(key, value.(string))
}

----------------------------------------------------------------------------------------------------------------------------

Deparsing (Json to string):-

pigeon := &Bird{
  Species:     "Pigeon",
  Description: "likes to eat seed",
}

// we can use the json.Marhal function to
// encode the pigeon variable to a JSON string
data, _ := json.Marshal(pigeon)
// data is the JSON string represented as bytes
// the second parameter here is the error, which we
// are ignoring for now, but which you should ideally handle
// in production grade code

// to print the data, we can typecast it to a string
fmt.Println(string(data))

Output:-

{"birdType":"Pigeon","what it does":"likes to eat seed"}

----------------------------------------------------------------------------------------------------------------------------

Encoding Arrays and Slices:-

pigeon := &Bird{
  Species:     "Pigeon",
  Description: "likes to eat seed",
}

// Now we pass a slice of two pigeons
data, _ := json.Marshal([]*Bird{pigeon, pigeon})
fmt.Println(string(data))

Output:-

[{"birdType":"Pigeon","what it does":"likes to eat seed"},{"birdType":"Pigeon","what it does":"likes to eat seed"}]

----------------------------------------------------------------------------------------------------------------------------

package main

import (
	"encoding/json"
	"fmt"
)

func main() {
	// The keys need to be strings, the values can be
	// any serializable value
	birdData := map[string]interface{}{
		"birdSounds": map[string]string{
			"pigeon": "coo",
			"eagle":  "squak",
		},
		"total birds": 2,
	}

	// JSON encoding is done the same way as before	
	data, _ := json.Marshal(birdData)
	fmt.Println(string(data))
}

Output:-

{"birdSounds":{"eagle":"squak","pigeon":"coo"},"total birds":2}

----------------------------------------------------------------------------------------------------------------------------

What to use (Structs vs maps)
As a general rule of thumb, if you can use structs to represent your JSON data, you should use them. The only good reason to use maps would be if it were not possible to use structs due to the uncertain nature of the keys or values in the data.

If we use maps, we will either need each of the keys to have the same data type, or use a generic type and convert it later.

----------------------------------------------------------------------------------------------------------------------------
